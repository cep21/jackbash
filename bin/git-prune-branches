#!/bin/bash
# Prune branches that are probably safe to delete
# These are usually merged remotes if using github
# 1. Delete branches that have ': gone]' in the title
# 2. Run `prune origin`
set -eou pipefail

# First, do the safe '-d' delete
git branch --no-track --no-color --merged | sed 's/[ *]*//' | xargs -n1 git branch -d &> /dev/null || true

# Try pruning already removed remote branches
git remote prune origin || true
git fetch -avp
git remote prune origin || true

# Mostly stolen from https://stackoverflow.com/questions/7726949/remove-tracking-branches-no-longer-on-remote
for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do
  git branch -D "$branch"
done
git gc --aggressive

# If we have the GH cli and the origin is github, prune those branches too
if which gh &> /dev/null ; then
  REMOTE=$(git remote get-url origin)
  if [[ "$REMOTE" == *@github.com/* ]]; then
    DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
    git checkout "$DEFAULT_BRANCH"
    for branch in $(git for-each-ref --format='%(refname)' refs/heads/); do
      branch="${branch#refs/heads/}"
      if [[ "$branch" == "main" || "$branch" == "master" ]]; then
        continue
      fi
      CURRENT_STATE=$(gh pr view "$branch" --json state -q .state)
      if [[ "$CURRENT_STATE" == "MERGED" ]]; then
        git branch -D "$branch"	      
      fi
    done
  fi
fi
